/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Adress } from "./Adress";
import { AdressCountArgs } from "./AdressCountArgs";
import { AdressFindManyArgs } from "./AdressFindManyArgs";
import { AdressFindUniqueArgs } from "./AdressFindUniqueArgs";
import { CreateAdressArgs } from "./CreateAdressArgs";
import { UpdateAdressArgs } from "./UpdateAdressArgs";
import { DeleteAdressArgs } from "./DeleteAdressArgs";
import { BuildingProjectFindManyArgs } from "../../buildingProject/base/BuildingProjectFindManyArgs";
import { BuildingProject } from "../../buildingProject/base/BuildingProject";
import { ConstructionFindManyArgs } from "../../construction/base/ConstructionFindManyArgs";
import { Construction } from "../../construction/base/Construction";
import { AdressService } from "../adress.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Adress)
export class AdressResolverBase {
  constructor(
    protected readonly service: AdressService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "read",
    possession: "any",
  })
  async _adressesMeta(
    @graphql.Args() args: AdressCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Adress])
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "read",
    possession: "any",
  })
  async adresses(@graphql.Args() args: AdressFindManyArgs): Promise<Adress[]> {
    return this.service.adresses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Adress, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "read",
    possession: "own",
  })
  async adress(
    @graphql.Args() args: AdressFindUniqueArgs
  ): Promise<Adress | null> {
    const result = await this.service.adress(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Adress)
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "create",
    possession: "any",
  })
  async createAdress(@graphql.Args() args: CreateAdressArgs): Promise<Adress> {
    return await this.service.createAdress({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Adress)
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  async updateAdress(
    @graphql.Args() args: UpdateAdressArgs
  ): Promise<Adress | null> {
    try {
      return await this.service.updateAdress({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Adress)
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "delete",
    possession: "any",
  })
  async deleteAdress(
    @graphql.Args() args: DeleteAdressArgs
  ): Promise<Adress | null> {
    try {
      return await this.service.deleteAdress(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BuildingProject], { name: "buildingProjects" })
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "read",
    possession: "any",
  })
  async findBuildingProjects(
    @graphql.Parent() parent: Adress,
    @graphql.Args() args: BuildingProjectFindManyArgs
  ): Promise<BuildingProject[]> {
    const results = await this.service.findBuildingProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Construction], { name: "constructions" })
  @nestAccessControl.UseRoles({
    resource: "Construction",
    action: "read",
    possession: "any",
  })
  async findConstructions(
    @graphql.Parent() parent: Adress,
    @graphql.Args() args: ConstructionFindManyArgs
  ): Promise<Construction[]> {
    const results = await this.service.findConstructions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
