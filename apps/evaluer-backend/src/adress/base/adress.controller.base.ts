/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AdressService } from "../adress.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AdressCreateInput } from "./AdressCreateInput";
import { Adress } from "./Adress";
import { AdressFindManyArgs } from "./AdressFindManyArgs";
import { AdressWhereUniqueInput } from "./AdressWhereUniqueInput";
import { AdressUpdateInput } from "./AdressUpdateInput";
import { BuildingProjectFindManyArgs } from "../../buildingProject/base/BuildingProjectFindManyArgs";
import { BuildingProject } from "../../buildingProject/base/BuildingProject";
import { BuildingProjectWhereUniqueInput } from "../../buildingProject/base/BuildingProjectWhereUniqueInput";
import { ConstructionFindManyArgs } from "../../construction/base/ConstructionFindManyArgs";
import { Construction } from "../../construction/base/Construction";
import { ConstructionWhereUniqueInput } from "../../construction/base/ConstructionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AdressControllerBase {
  constructor(
    protected readonly service: AdressService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Adress })
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAdress(@common.Body() data: AdressCreateInput): Promise<Adress> {
    return await this.service.createAdress({
      data: data,
      select: {
        city: true,
        country: true,
        createdAt: true,
        id: true,
        postcode: true,
        state: true,
        streetname: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Adress] })
  @ApiNestedQuery(AdressFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async adresses(@common.Req() request: Request): Promise<Adress[]> {
    const args = plainToClass(AdressFindManyArgs, request.query);
    return this.service.adresses({
      ...args,
      select: {
        city: true,
        country: true,
        createdAt: true,
        id: true,
        postcode: true,
        state: true,
        streetname: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Adress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async adress(
    @common.Param() params: AdressWhereUniqueInput
  ): Promise<Adress | null> {
    const result = await this.service.adress({
      where: params,
      select: {
        city: true,
        country: true,
        createdAt: true,
        id: true,
        postcode: true,
        state: true,
        streetname: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Adress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAdress(
    @common.Param() params: AdressWhereUniqueInput,
    @common.Body() data: AdressUpdateInput
  ): Promise<Adress | null> {
    try {
      return await this.service.updateAdress({
        where: params,
        data: data,
        select: {
          city: true,
          country: true,
          createdAt: true,
          id: true,
          postcode: true,
          state: true,
          streetname: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Adress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAdress(
    @common.Param() params: AdressWhereUniqueInput
  ): Promise<Adress | null> {
    try {
      return await this.service.deleteAdress({
        where: params,
        select: {
          city: true,
          country: true,
          createdAt: true,
          id: true,
          postcode: true,
          state: true,
          streetname: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/buildingProjects")
  @ApiNestedQuery(BuildingProjectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "read",
    possession: "any",
  })
  async findBuildingProjects(
    @common.Req() request: Request,
    @common.Param() params: AdressWhereUniqueInput
  ): Promise<BuildingProject[]> {
    const query = plainToClass(BuildingProjectFindManyArgs, request.query);
    const results = await this.service.findBuildingProjects(params.id, {
      ...query,
      select: {
        adress: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/buildingProjects")
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  async connectBuildingProjects(
    @common.Param() params: AdressWhereUniqueInput,
    @common.Body() body: BuildingProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buildingProjects: {
        connect: body,
      },
    };
    await this.service.updateAdress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/buildingProjects")
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  async updateBuildingProjects(
    @common.Param() params: AdressWhereUniqueInput,
    @common.Body() body: BuildingProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buildingProjects: {
        set: body,
      },
    };
    await this.service.updateAdress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/buildingProjects")
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  async disconnectBuildingProjects(
    @common.Param() params: AdressWhereUniqueInput,
    @common.Body() body: BuildingProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      buildingProjects: {
        disconnect: body,
      },
    };
    await this.service.updateAdress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/constructions")
  @ApiNestedQuery(ConstructionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Construction",
    action: "read",
    possession: "any",
  })
  async findConstructions(
    @common.Req() request: Request,
    @common.Param() params: AdressWhereUniqueInput
  ): Promise<Construction[]> {
    const query = plainToClass(ConstructionFindManyArgs, request.query);
    const results = await this.service.findConstructions(params.id, {
      ...query,
      select: {
        adress: {
          select: {
            id: true,
          },
        },

        buildingProjects: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/constructions")
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  async connectConstructions(
    @common.Param() params: AdressWhereUniqueInput,
    @common.Body() body: ConstructionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      constructions: {
        connect: body,
      },
    };
    await this.service.updateAdress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/constructions")
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  async updateConstructions(
    @common.Param() params: AdressWhereUniqueInput,
    @common.Body() body: ConstructionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      constructions: {
        set: body,
      },
    };
    await this.service.updateAdress({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/constructions")
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "update",
    possession: "any",
  })
  async disconnectConstructions(
    @common.Param() params: AdressWhereUniqueInput,
    @common.Body() body: ConstructionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      constructions: {
        disconnect: body,
      },
    };
    await this.service.updateAdress({
      where: params,
      data,
      select: { id: true },
    });
  }
}
