/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Adress, // @ts-ignore
  BuildingProject, // @ts-ignore
  Construction,
} from "@prisma/client";

export class AdressServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.AdressCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdressCountArgs>
  ): Promise<number> {
    return this.prisma.adress.count(args);
  }

  async adresses<T extends Prisma.AdressFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdressFindManyArgs>
  ): Promise<Adress[]> {
    return this.prisma.adress.findMany(args);
  }
  async adress<T extends Prisma.AdressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdressFindUniqueArgs>
  ): Promise<Adress | null> {
    return this.prisma.adress.findUnique(args);
  }
  async createAdress<T extends Prisma.AdressCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdressCreateArgs>
  ): Promise<Adress> {
    return this.prisma.adress.create<T>(args);
  }
  async updateAdress<T extends Prisma.AdressUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdressUpdateArgs>
  ): Promise<Adress> {
    return this.prisma.adress.update<T>(args);
  }
  async deleteAdress<T extends Prisma.AdressDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdressDeleteArgs>
  ): Promise<Adress> {
    return this.prisma.adress.delete(args);
  }

  async findBuildingProjects(
    parentId: number,
    args: Prisma.BuildingProjectFindManyArgs
  ): Promise<BuildingProject[]> {
    return this.prisma.adress
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .buildingProjects(args);
  }

  async findConstructions(
    parentId: number,
    args: Prisma.ConstructionFindManyArgs
  ): Promise<Construction[]> {
    return this.prisma.adress
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .constructions(args);
  }
}
