/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Construction, // @ts-ignore
  Adress, // @ts-ignore
  BuildingProject,
} from "@prisma/client";

export class ConstructionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ConstructionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConstructionCountArgs>
  ): Promise<number> {
    return this.prisma.construction.count(args);
  }

  async constructions<T extends Prisma.ConstructionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConstructionFindManyArgs>
  ): Promise<Construction[]> {
    return this.prisma.construction.findMany(args);
  }
  async construction<T extends Prisma.ConstructionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConstructionFindUniqueArgs>
  ): Promise<Construction | null> {
    return this.prisma.construction.findUnique(args);
  }
  async createConstruction<T extends Prisma.ConstructionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConstructionCreateArgs>
  ): Promise<Construction> {
    return this.prisma.construction.create<T>(args);
  }
  async updateConstruction<T extends Prisma.ConstructionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConstructionUpdateArgs>
  ): Promise<Construction> {
    return this.prisma.construction.update<T>(args);
  }
  async deleteConstruction<T extends Prisma.ConstructionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConstructionDeleteArgs>
  ): Promise<Construction> {
    return this.prisma.construction.delete(args);
  }

  async getAdress(parentId: string): Promise<Adress | null> {
    return this.prisma.construction
      .findUnique({
        where: { id: parentId },
      })
      .adress();
  }

  async getBuildingProjects(parentId: string): Promise<BuildingProject | null> {
    return this.prisma.construction
      .findUnique({
        where: { id: parentId },
      })
      .buildingProjects();
  }
}
