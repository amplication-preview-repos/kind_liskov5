/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BuildingProject, // @ts-ignore
  Construction, // @ts-ignore
  Adress,
} from "@prisma/client";

export class BuildingProjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BuildingProjectCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BuildingProjectCountArgs>
  ): Promise<number> {
    return this.prisma.buildingProject.count(args);
  }

  async buildingProjects<T extends Prisma.BuildingProjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BuildingProjectFindManyArgs>
  ): Promise<BuildingProject[]> {
    return this.prisma.buildingProject.findMany(args);
  }
  async buildingProject<T extends Prisma.BuildingProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BuildingProjectFindUniqueArgs>
  ): Promise<BuildingProject | null> {
    return this.prisma.buildingProject.findUnique(args);
  }
  async createBuildingProject<T extends Prisma.BuildingProjectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BuildingProjectCreateArgs>
  ): Promise<BuildingProject> {
    return this.prisma.buildingProject.create<T>(args);
  }
  async updateBuildingProject<T extends Prisma.BuildingProjectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BuildingProjectUpdateArgs>
  ): Promise<BuildingProject> {
    return this.prisma.buildingProject.update<T>(args);
  }
  async deleteBuildingProject<T extends Prisma.BuildingProjectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BuildingProjectDeleteArgs>
  ): Promise<BuildingProject> {
    return this.prisma.buildingProject.delete(args);
  }

  async findConstruction(
    parentId: string,
    args: Prisma.ConstructionFindManyArgs
  ): Promise<Construction[]> {
    return this.prisma.buildingProject
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .construction(args);
  }

  async getAdress(parentId: string): Promise<Adress | null> {
    return this.prisma.buildingProject
      .findUnique({
        where: { id: parentId },
      })
      .adress();
  }
}
