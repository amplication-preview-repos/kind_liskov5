/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BuildingProjectService } from "../buildingProject.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BuildingProjectCreateInput } from "./BuildingProjectCreateInput";
import { BuildingProject } from "./BuildingProject";
import { BuildingProjectFindManyArgs } from "./BuildingProjectFindManyArgs";
import { BuildingProjectWhereUniqueInput } from "./BuildingProjectWhereUniqueInput";
import { BuildingProjectUpdateInput } from "./BuildingProjectUpdateInput";
import { ConstructionFindManyArgs } from "../../construction/base/ConstructionFindManyArgs";
import { Construction } from "../../construction/base/Construction";
import { ConstructionWhereUniqueInput } from "../../construction/base/ConstructionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BuildingProjectControllerBase {
  constructor(
    protected readonly service: BuildingProjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BuildingProject })
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBuildingProject(
    @common.Body() data: BuildingProjectCreateInput
  ): Promise<BuildingProject> {
    return await this.service.createBuildingProject({
      data: {
        ...data,

        adress: data.adress
          ? {
              connect: data.adress,
            }
          : undefined,
      },
      select: {
        adress: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BuildingProject] })
  @ApiNestedQuery(BuildingProjectFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async buildingProjects(
    @common.Req() request: Request
  ): Promise<BuildingProject[]> {
    const args = plainToClass(BuildingProjectFindManyArgs, request.query);
    return this.service.buildingProjects({
      ...args,
      select: {
        adress: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BuildingProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async buildingProject(
    @common.Param() params: BuildingProjectWhereUniqueInput
  ): Promise<BuildingProject | null> {
    const result = await this.service.buildingProject({
      where: params,
      select: {
        adress: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BuildingProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBuildingProject(
    @common.Param() params: BuildingProjectWhereUniqueInput,
    @common.Body() data: BuildingProjectUpdateInput
  ): Promise<BuildingProject | null> {
    try {
      return await this.service.updateBuildingProject({
        where: params,
        data: {
          ...data,

          adress: data.adress
            ? {
                connect: data.adress,
              }
            : undefined,
        },
        select: {
          adress: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BuildingProject })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBuildingProject(
    @common.Param() params: BuildingProjectWhereUniqueInput
  ): Promise<BuildingProject | null> {
    try {
      return await this.service.deleteBuildingProject({
        where: params,
        select: {
          adress: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/construction")
  @ApiNestedQuery(ConstructionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Construction",
    action: "read",
    possession: "any",
  })
  async findConstruction(
    @common.Req() request: Request,
    @common.Param() params: BuildingProjectWhereUniqueInput
  ): Promise<Construction[]> {
    const query = plainToClass(ConstructionFindManyArgs, request.query);
    const results = await this.service.findConstruction(params.id, {
      ...query,
      select: {
        adress: {
          select: {
            id: true,
          },
        },

        buildingProjects: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/construction")
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "update",
    possession: "any",
  })
  async connectConstruction(
    @common.Param() params: BuildingProjectWhereUniqueInput,
    @common.Body() body: ConstructionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      construction: {
        connect: body,
      },
    };
    await this.service.updateBuildingProject({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/construction")
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "update",
    possession: "any",
  })
  async updateConstruction(
    @common.Param() params: BuildingProjectWhereUniqueInput,
    @common.Body() body: ConstructionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      construction: {
        set: body,
      },
    };
    await this.service.updateBuildingProject({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/construction")
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "update",
    possession: "any",
  })
  async disconnectConstruction(
    @common.Param() params: BuildingProjectWhereUniqueInput,
    @common.Body() body: ConstructionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      construction: {
        disconnect: body,
      },
    };
    await this.service.updateBuildingProject({
      where: params,
      data,
      select: { id: true },
    });
  }
}
