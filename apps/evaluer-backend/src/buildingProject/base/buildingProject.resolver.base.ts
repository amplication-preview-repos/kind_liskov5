/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BuildingProject } from "./BuildingProject";
import { BuildingProjectCountArgs } from "./BuildingProjectCountArgs";
import { BuildingProjectFindManyArgs } from "./BuildingProjectFindManyArgs";
import { BuildingProjectFindUniqueArgs } from "./BuildingProjectFindUniqueArgs";
import { CreateBuildingProjectArgs } from "./CreateBuildingProjectArgs";
import { UpdateBuildingProjectArgs } from "./UpdateBuildingProjectArgs";
import { DeleteBuildingProjectArgs } from "./DeleteBuildingProjectArgs";
import { ConstructionFindManyArgs } from "../../construction/base/ConstructionFindManyArgs";
import { Construction } from "../../construction/base/Construction";
import { Adress } from "../../adress/base/Adress";
import { BuildingProjectService } from "../buildingProject.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BuildingProject)
export class BuildingProjectResolverBase {
  constructor(
    protected readonly service: BuildingProjectService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "read",
    possession: "any",
  })
  async _buildingProjectsMeta(
    @graphql.Args() args: BuildingProjectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BuildingProject])
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "read",
    possession: "any",
  })
  async buildingProjects(
    @graphql.Args() args: BuildingProjectFindManyArgs
  ): Promise<BuildingProject[]> {
    return this.service.buildingProjects(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BuildingProject, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "read",
    possession: "own",
  })
  async buildingProject(
    @graphql.Args() args: BuildingProjectFindUniqueArgs
  ): Promise<BuildingProject | null> {
    const result = await this.service.buildingProject(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BuildingProject)
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "create",
    possession: "any",
  })
  async createBuildingProject(
    @graphql.Args() args: CreateBuildingProjectArgs
  ): Promise<BuildingProject> {
    return await this.service.createBuildingProject({
      ...args,
      data: {
        ...args.data,

        adress: args.data.adress
          ? {
              connect: args.data.adress,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BuildingProject)
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "update",
    possession: "any",
  })
  async updateBuildingProject(
    @graphql.Args() args: UpdateBuildingProjectArgs
  ): Promise<BuildingProject | null> {
    try {
      return await this.service.updateBuildingProject({
        ...args,
        data: {
          ...args.data,

          adress: args.data.adress
            ? {
                connect: args.data.adress,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BuildingProject)
  @nestAccessControl.UseRoles({
    resource: "BuildingProject",
    action: "delete",
    possession: "any",
  })
  async deleteBuildingProject(
    @graphql.Args() args: DeleteBuildingProjectArgs
  ): Promise<BuildingProject | null> {
    try {
      return await this.service.deleteBuildingProject(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Construction], { name: "construction" })
  @nestAccessControl.UseRoles({
    resource: "Construction",
    action: "read",
    possession: "any",
  })
  async findConstruction(
    @graphql.Parent() parent: BuildingProject,
    @graphql.Args() args: ConstructionFindManyArgs
  ): Promise<Construction[]> {
    const results = await this.service.findConstruction(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Adress, {
    nullable: true,
    name: "adress",
  })
  @nestAccessControl.UseRoles({
    resource: "Adress",
    action: "read",
    possession: "any",
  })
  async getAdress(
    @graphql.Parent() parent: BuildingProject
  ): Promise<Adress | null> {
    const result = await this.service.getAdress(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
