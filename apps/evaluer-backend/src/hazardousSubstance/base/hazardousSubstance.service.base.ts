/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, HazardousSubstance } from "@prisma/client";

export class HazardousSubstanceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.HazardousSubstanceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.HazardousSubstanceCountArgs>
  ): Promise<number> {
    return this.prisma.hazardousSubstance.count(args);
  }

  async hazardousSubstances<T extends Prisma.HazardousSubstanceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.HazardousSubstanceFindManyArgs>
  ): Promise<HazardousSubstance[]> {
    return this.prisma.hazardousSubstance.findMany(args);
  }
  async hazardousSubstance<T extends Prisma.HazardousSubstanceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.HazardousSubstanceFindUniqueArgs>
  ): Promise<HazardousSubstance | null> {
    return this.prisma.hazardousSubstance.findUnique(args);
  }
  async createHazardousSubstance<T extends Prisma.HazardousSubstanceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HazardousSubstanceCreateArgs>
  ): Promise<HazardousSubstance> {
    return this.prisma.hazardousSubstance.create<T>(args);
  }
  async updateHazardousSubstance<T extends Prisma.HazardousSubstanceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.HazardousSubstanceUpdateArgs>
  ): Promise<HazardousSubstance> {
    return this.prisma.hazardousSubstance.update<T>(args);
  }
  async deleteHazardousSubstance<T extends Prisma.HazardousSubstanceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.HazardousSubstanceDeleteArgs>
  ): Promise<HazardousSubstance> {
    return this.prisma.hazardousSubstance.delete(args);
  }
}
